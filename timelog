#!/bin/bash
# first line is for vim syntax only
# not intended to run on it's own
if [ "$0" = "$BASH_SOURCE" ]; then
    echo "this file is intended for sourcing by interactive shell"
    exit
fi

# by peoples request
if [ "STYPE" == "darwin"* ]; then
    echo "err: go get a normal OS"
fi

# basic time tracker

# autocomplete
_t(){
    TIME_LOG="${TIME_LOG:-$HOME/.timelog}"
    local cmdlist
    cmdlist="h -h --help e -e --edit l -l --last r -r --report t -t --time"
    local wordlist
    wordlist="**start **afk"
    # extract only categories ending with ':'
    local loglist
    loglist=$(awk -F':- ' '{print $2}' "$TIME_LOG" | cut -s -d: -f1 | sort -u | xargs -I "%" echo %:)

    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $( compgen -W "$cmdlist $wordlist $loglist" -- "$cur" ) )
}

t(){
    TIME_LOG="${TIME_LOG:-$HOME/.timelog}"
    if [ $# -eq 0 ]; then
        t -h
    else
        case "$1" in
            h|-h|--help)
                echo "t - timetracker"
                echo "usage: t                      # show this help"
                echo "usage: t <activity>           # log new activity"
                echo "usage: t h|-h|--help          # show this help"
                echo "usage: t e|-e|--edit          # edit timelog"
                echo "usage: t l|-l|--last [nr]     # show last activity(-ies), 10 by default"
                echo "usage: t r|-r|--report [<r>]  # generate report"
                echo "                 t - today    #default"
                echo "                 a - all"
                echo "                 y - yesterday"
                echo "usage: t t|-t|--time          # report time since last activity"
                ;;
            l|-l|--last)
                if [ ! -e ${TIME_LOG} ]; then
                    echo "err: no time log present yet"
                    return
                fi
                if [ $# -eq 1 ]; then
                    NR=10
                else
                    NR=$2
                fi
                tail -n ${NR} ${TIME_LOG} 2>/dev/null || echo "no activities"
                ;;
            e|-e|--edit)
                ${EDITOR:-vi} ${TIME_LOG}
                ;;
            r|-r|--report)
                if [ ! -e ${TIME_LOG} ]; then
                    echo "err: no time log present yet"
                    return
                fi
                RTYPE=${2:-t} # default report type to 't' if not present
                if [ "$RTYPE" == "t" ];then
                    # today
                    CMD="grep ^$(date +%F) ${TIME_LOG}"
                elif [ "$RTYPE" == "a" ];then
                    # all
                    CMD="cat ${TIME_LOG}"
                elif [ "$RTYPE" == "y" ];then
                    #yesterday
                     CMD="grep ^$(date -d yesterday +%F) ${TIME_LOG}"
                else
                    echo "err: no such report type"
                    return
                fi
                # beta
                $CMD | while read line;
                do
                    eval $(echo $line | awk -F':- ' '{print "ts=\""$1"\" txt=\""$2"\""}');
                    if [ -n ${ts0+x} ]; then
                        dur=$(date -u +%H:%M -d @$(( $(date +%s -d "$ts") - $(date +%s -d "$ts0") )))
                    else
                        dur="00:00"
                    fi
                    echo "${ts} (${dur}): ${txt}"
                    ts0=$ts
                done | tee ${TIME_LOG}.report
                ;;
            t|-t|--time)
                if [ ! -e ${TIME_LOG} ]; then
                    echo "err: no time log present yet"
                    return
                fi
                last=$(tail -1 ${TIME_LOG} | awk -F':- ' '{print $1}')
                now=$(date +"%F %H:%M")
                dur=$(date -u +%H:%M -d @$(( $(date +%s -d "$now") - $(date +%s -d "$last") )))
                tail -1 ${TIME_LOG}
                echo $dur
                ;;
            *)
                TS=$(date +"%F %H:%M")
                echo "${TS}:- $*" >> ${TIME_LOG}
                ;;
        esac
    fi
}

complete -F _t t
